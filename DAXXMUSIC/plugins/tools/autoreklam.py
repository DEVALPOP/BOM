import asyncio
import datetime
from DAXXMUSIC import app
from pyrogram import Client
from DAXXMUSIC.utils.database import get_served_chats
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton


MESSAGE = f"""**
âž²Ú†Û•Ù†Ø§ÚµÛŽÚ© ØªØ§ÛŒØ¨Û•Øª Ø¨Û• ÙˆØªÛ• Ùˆ Ú¤ÛŒØ¯ÛŒÛ†ÛŒ Ø¨ÛŽ Ù„Û†Ú¯Û† ðŸŒšðŸ–¤!

âž² Ù‡Û•Ø±Ø¦ÛŽØ³ØªØ§ Ø¬Û†ÛŒÙ†ÛŒ Ø¨Ú©Û• Ù¾Û•Ø´ÛŒÙ…Ø§Ù† Ù†Ø§Ø¨ÛŒÛ•ÙˆÛ• [ÙˆØªÛ•Ú¾ ðŸ–¤](t.me/wtay_jw4n)

âž² Ù„ÛŒÙ†Ú©ÛŒ Ú©Û•Ù†Ø§Úµ 
https://t.me/Wtay_jw4n
**"""

BUTTON = reply_markup=InlineKeyboardMarkup(
            [
                [
                      InlineKeyboardButton(
                        "ØªÛŽÚ©Ø³ØªÛŒ Ø¨Ú†ÙˆÙˆÙƒ ðŸ«§ðŸ–¤Â»", url=f"https://t.me/Wtay_jw4n"),
                      InlineKeyboardButton(
                        "ÙˆØªÛ•ÛŒ Ø¦Ø§Ø´Ù‚Ø§Ù†Û• ðŸ«§ðŸ–¤Â»", url=f"https://t.me/Wtay_jw4n"),
                ],[
                      InlineKeyboardButton(
                        "Ø¬Û†ÛŒÙ†ÛŒ Ú©Û•Ù†Ø§Úµ Ø¨Ú©Û• ðŸ«§ðŸ–¤Â»", url=f"https://t.me/Wtay_jw4n")
                ],[
                       InlineKeyboardButton(
                          "ÙˆØªÛ•Ú¾ ðŸ«§ðŸ–¤Â»", url=f"https://t.me/Wtay_jw4n"),
                       InlineKeyboardButton(
                           "Ø¦ÛŽØ±Û• Ø¯Ø§Ø¨Ú¯Ø±Û• ðŸ«§ðŸ–¤Â»", url=f"https://t.me/Wtay_jw4n"),
                ],[

                        InlineKeyboardButton(
                        "Ø¨Û†ØªÛŒ Ø¬Û†ÛŒÙ† ðŸ«§ðŸ–¤Â»", url=f"https://t.me/iqjobot"),


                ],
            ]
        )



async def send_message_to_chats():
    try:
        chats = await get_served_chats()

        for chat_info in chats:
            chat_id = chat_info.get('chat_id')
            if isinstance(chat_id, int):  # Check if chat_id is an integer
                try:
                    await app.send_photo(chat_id, photo="https://graph.org/file/a90c116b776c90d58f5e8.jpg", caption=MESSAGE, reply_markup=BUTTON)
                    await asyncio.sleep(3)  # Sleep for 1 second between sending messages
                except Exception as e:
                    pass  # Do nothing if an error occurs while sending message
    except Exception as e:
        pass  # Do nothing if an error occurs while fetching served chats
async def continuous_broadcast():
    while True:
        await send_message_to_chats()
        await asyncio.sleep(30000)  # Sleep (30000 seconds) between next broadcast

# Start the continuous broadcast loop
asyncio.create_task(continuous_broadcast())
